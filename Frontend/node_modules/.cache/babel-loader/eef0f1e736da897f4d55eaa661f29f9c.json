{"ast":null,"code":"import { SERVER_URL, userConstants } from '../_constants';\nimport { alertActions } from './';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\nimport { history } from '../_helper/history.js';\nexport const userActions = {\n  login,\n  logout,\n  register,\n  update\n};\n\nfunction login(username, password) {\n  return async dispatch => {\n    dispatch(request({\n      username\n    }));\n    const data = {\n      id: username,\n      password: password\n    }; //set the with credentials to true\n\n    axios.defaults.withCredentials = true; //make a post request with the user data\n\n    try {\n      const response = await axios.post(SERVER_URL + '/user/login', data);\n      console.log(response.headers['set-cookie']);\n      history.push('/login');\n      dispatch(success(response.data));\n    } catch (error) {\n      var _error$response, _error$response$data;\n\n      const msg = (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.code) === \"INVALID_LOGIN\" ? [\"Invalid user ID or password\"] : Array.isArray(data) ? data.map(d => d.message) : [\"Some error occured, please try again.\"];\n      dispatch(failure(msg));\n      dispatch(alertActions.error(msg));\n    }\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error\n    };\n  }\n}\n\nfunction logout() {\n  cookie.remove('cookie', {\n    path: '/'\n  });\n  return {\n    type: userConstants.LOGOUT\n  };\n}\n\nfunction register(data) {\n  return async dispatch => {\n    dispatch(request(data));\n\n    try {\n      const response = await axios.post(SERVER_URL + '/user/signup', data);\n      dispatch(success(response.data));\n      history.push('/signup');\n    } catch (error) {\n      console.log(\"error in signup \" + JSON.stringify(error));\n      const data = error.response.data;\n      const msg = data && (data === null || data === void 0 ? void 0 : data.code) === 11000 ? [\"User ID already exists, please login\"] : Array.isArray(data) ? data.map(d => d.message) : [\"Some error occured, please try again.\"];\n      dispatch(failure(msg));\n      dispatch(alertActions.error(msg));\n    }\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.REGISTER_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.REGISTER_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.REGISTER_FAILURE,\n      error\n    };\n  }\n}\n\nfunction update(data) {\n  return async dispatch => {\n    dispatch(request(data));\n\n    try {\n      const response = await axios.put(SERVER_URL + '/user/update', data);\n      dispatch(success(response.data));\n      dispatch(alertActions.success('User updated successfully'));\n    } catch (error) {\n      const data = error.response.data;\n      let msg = [\"Some error occured, please try again.\"];\n\n      if (data && (data === null || data === void 0 ? void 0 : data.code)) {\n        switch (data === null || data === void 0 ? void 0 : data.code) {\n          case \"INVALID_USER_ID\":\n            msg = [\"Invalid user ID\"];\n            break;\n\n          case \"INVALID_PASSWORD\":\n            msg = [\"Invalid current password\"];\n            break;\n\n          default: // Fall through.\n\n        }\n      } else if (Array.isArray(data)) {\n        msg = data.map(d => d.message);\n      }\n\n      dispatch(failure(msg));\n      dispatch(alertActions.error(msg));\n    }\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.UPDATE_REQUEST,\n      user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.UPDATE_SUCCESS,\n      user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.UPDATE_FAILURE,\n      error\n    };\n  }\n}","map":{"version":3,"sources":["/Users/poonam/Projects/SplitwiseMongoDb/Frontend/src/_actions/user.actions.js"],"names":["SERVER_URL","userConstants","alertActions","axios","cookie","history","userActions","login","logout","register","update","username","password","dispatch","request","data","id","defaults","withCredentials","response","post","console","log","headers","push","success","error","msg","code","Array","isArray","map","d","message","failure","user","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","remove","path","LOGOUT","JSON","stringify","REGISTER_REQUEST","REGISTER_SUCCESS","REGISTER_FAILURE","put","UPDATE_REQUEST","UPDATE_SUCCESS","UPDATE_FAILURE"],"mappings":"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","sourcesContent":["import { SERVER_URL, userConstants } from '../_constants';\nimport { alertActions } from './';\nimport axios from 'axios';\nimport cookie from 'react-cookies';\nimport { history } from '../_helper/history.js';\n\nexport const userActions = {\n    login,\n    logout,\n    register,\n    update,\n};\n\nfunction login(username, password) {\n    return async dispatch => {\n        dispatch(request({ username }));\n        const data = {\n            id: username,\n            password: password\n        }\n        //set the with credentials to true\n        axios.defaults.withCredentials = true;\n        //make a post request with the user data\n        try {\n            const response = await axios.post(SERVER_URL + '/user/login', data);\n            console.log(response.headers['set-cookie'])\n            history.push('/login');\n            dispatch(success(response.data));\n        }\n        catch (error) {\n            const msg = (error?.response?.data?.code === \"INVALID_LOGIN\") ? [\"Invalid user ID or password\"] : Array.isArray(data) ? data.map(d => d.message) : [\"Some error occured, please try again.\"];\n            dispatch(failure(msg));\n            dispatch(alertActions.error(msg));\n        }\n    };\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) {\n        return { type: userConstants.LOGIN_SUCCESS, user }\n    }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction logout() {\n    cookie.remove('cookie', { path: '/' });\n    return ({ type: userConstants.LOGOUT });\n}\n\nfunction register(data) {\n    return async dispatch => {\n        dispatch(request(data));\n        try {\n            const response = await axios.post(SERVER_URL + '/user/signup', data);\n            dispatch(success(response.data));\n            history.push('/signup');\n        } catch (error) {\n            console.log(\"error in signup \"+JSON.stringify(error));\n            const data = error.response.data;\n            const msg = (data && data?.code === 11000) ? [\"User ID already exists, please login\"] : Array.isArray(data) ? data.map(d => d.message) : [\"Some error occured, please try again.\"];\n            dispatch(failure(msg));\n            dispatch(alertActions.error(msg));\n        }\n\n    };\n\n    function request(user) { return { type: userConstants.REGISTER_REQUEST, user } }\n    function success(user) { return { type: userConstants.REGISTER_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.REGISTER_FAILURE, error } }\n}\n\nfunction update(data) {\n    return async dispatch => {\n        dispatch(request(data));\n        try {\n            const response = await axios.put(SERVER_URL + '/user/update', data);\n            dispatch(success(response.data));\n            dispatch(alertActions.success('User updated successfully'));\n        } catch (error) {\n            const data = error.response.data;\n            let msg = [\"Some error occured, please try again.\"];\n            if (data && data?.code) {\n                switch (data?.code) {\n                    case \"INVALID_USER_ID\":\n                        msg = [\"Invalid user ID\"];\n                        break;\n                    case \"INVALID_PASSWORD\":\n                        msg = [\"Invalid current password\"];\n                        break;\n                    default:\n                    // Fall through.\n                }\n            } else if (Array.isArray(data)) {\n                msg = data.map(d => d.message);\n            }\n            dispatch(failure(msg));\n            dispatch(alertActions.error(msg));\n        }\n\n    };\n\n    function request(user) { return { type: userConstants.UPDATE_REQUEST, user } }\n    function success(user) { return { type: userConstants.UPDATE_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.UPDATE_FAILURE, error } }\n}\n"]},"metadata":{},"sourceType":"module"}