{"ast":null,"code":"var _jsxFileName = \"/Users/poonam/Projects/Splitwise/Frontend/src/components/User/UserTypeHead.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { useState } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { connect } from 'react-redux';\nimport { SERVER_URL } from '../../_constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SEARCH_URI = SERVER_URL + '/user/search';\n\nfunction UserTypeHead(props) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const handleSearch = async query => {\n    setIsLoading(true);\n    await fetchData(query);\n    setIsLoading(false);\n  };\n\n  const fetchData = async query => {\n    try {\n      const results = await axios.get(`${SEARCH_URI}?queryString=${query}`);\n      const options = results.data.map(i => ({\n        email: i.email,\n        name: `${i.first_name}${i.last_name ? \" \" + i.last_name : \"\"}`,\n        first_name: i.first_name,\n        last_name: i.last_name,\n        id: i.email\n      }));\n      setOptions(options);\n    } catch (err) {\n      console.log(\"Error in fetch Data \" + err);\n    }\n  }; // Bypass client-side filtering by returning `true`. Results are already\n  // filtered by the search endpoint, so no need to do it again.\n\n\n  const filterBy = (option, skipCurrentUser) => {\n    if (skipCurrentUser) {\n      return option.email !== props.user.email;\n    }\n\n    return true;\n  };\n\n  return /*#__PURE__*/_jsxDEV(AsyncTypeahead, {\n    id: \"userTypeHead\",\n    filterBy: option => filterBy(option, props.skipCurrentUser),\n    isLoading: isLoading,\n    labelKey: \"name\",\n    minLength: 1,\n    onSearch: handleSearch,\n    options: options,\n    placeholder: \"Search User\",\n    onChange: props.onChange,\n    defaultInputValue: props.initialValue.first_name ? `${props.initialValue.first_name}${props.initialValue.last_name ? \" \" + props.initialValue.last_name : \"\"}` : '',\n    renderMenuItemChildren: (option, props) => /*#__PURE__*/_jsxDEV(ListGroup.Item, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: option.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        children: option.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, option.email, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)\n  }, props.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(UserTypeHead, \"ADxTizbguGrPNkIJkRw4Crgtoec=\");\n\n_c = UserTypeHead;\n;\n\nfunction mapState(state) {\n  const {\n    user\n  } = state.authentication;\n  return {\n    user\n  };\n}\n\nconst connectedUserTypeHead = connect(mapState, {})(UserTypeHead);\nexport { connectedUserTypeHead as UserTypeHead };\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTypeHead\");","map":{"version":3,"sources":["/Users/poonam/Projects/Splitwise/Frontend/src/components/User/UserTypeHead.js"],"names":["axios","useState","ListGroup","AsyncTypeahead","connect","SERVER_URL","SEARCH_URI","UserTypeHead","props","isLoading","setIsLoading","options","setOptions","handleSearch","query","fetchData","results","get","data","map","i","email","name","first_name","last_name","id","err","console","log","filterBy","option","skipCurrentUser","user","onChange","initialValue","key","mapState","state","authentication","connectedUserTypeHead"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,2BAA/B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AAEA,MAAMC,UAAU,GAAED,UAAU,GAAE,cAA9B;;AAEA,SAASE,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,EAAD,CAAtC;;AAEA,QAAMY,YAAY,GAAG,MAAOC,KAAP,IAAiB;AACpCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMK,SAAS,CAACD,KAAD,CAAf;AACAJ,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAJD;;AAMA,QAAMK,SAAS,GAAG,MAAOD,KAAP,IAAiB;AACjC,QAAI;AACF,YAAME,OAAO,GAAG,MAAMhB,KAAK,CAACiB,GAAN,CAAW,GAAEX,UAAW,gBAAeQ,KAAM,EAA7C,CAAtB;AACA,YAAMH,OAAO,GAAGK,OAAO,CAACE,IAAR,CAAaC,GAAb,CAAkBC,CAAD,KAAQ;AACvCC,QAAAA,KAAK,EAAED,CAAC,CAACC,KAD8B;AAEvCC,QAAAA,IAAI,EAAG,GAAEF,CAAC,CAACG,UAAW,GAAEH,CAAC,CAACI,SAAF,GAAc,MAAMJ,CAAC,CAACI,SAAtB,GAAkC,EAAG,EAFtB;AAGvCD,QAAAA,UAAU,EAAEH,CAAC,CAACG,UAHyB;AAIvCC,QAAAA,SAAS,EAAEJ,CAAC,CAACI,SAJ0B;AAKvCC,QAAAA,EAAE,EAAEL,CAAC,CAACC;AALiC,OAAR,CAAjB,CAAhB;AAOAT,MAAAA,UAAU,CAACD,OAAD,CAAV;AACD,KAVD,CAUE,OAAOe,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAyBF,GAArC;AACD;AACF,GAdD,CAV2B,CA0B3B;AACA;;;AACA,QAAMG,QAAQ,GAAG,CAACC,MAAD,EAASC,eAAT,KAA6B;AAC5C,QAAIA,eAAJ,EAAqB;AACnB,aAAOD,MAAM,CAACT,KAAP,KAAiBb,KAAK,CAACwB,IAAN,CAAWX,KAAnC;AACD;;AACD,WAAO,IAAP;AACD,GALD;;AAOA,sBACE,QAAC,cAAD;AAEE,IAAA,EAAE,EAAC,cAFL;AAGE,IAAA,QAAQ,EAAGS,MAAD,IAAYD,QAAQ,CAACC,MAAD,EAAStB,KAAK,CAACuB,eAAf,CAHhC;AAIE,IAAA,SAAS,EAAEtB,SAJb;AAKE,IAAA,QAAQ,EAAC,MALX;AAME,IAAA,SAAS,EAAE,CANb;AAOE,IAAA,QAAQ,EAAEI,YAPZ;AAQE,IAAA,OAAO,EAAEF,OARX;AASE,IAAA,WAAW,EAAC,aATd;AAUE,IAAA,QAAQ,EAAEH,KAAK,CAACyB,QAVlB;AAWE,IAAA,iBAAiB,EAAEzB,KAAK,CAAC0B,YAAN,CAAmBX,UAAnB,GAAiC,GAAEf,KAAK,CAAC0B,YAAN,CAAmBX,UAAW,GAAEf,KAAK,CAAC0B,YAAN,CAAmBV,SAAnB,GAA+B,MAAMhB,KAAK,CAAC0B,YAAN,CAAmBV,SAAxD,GAAoE,EAAG,EAA1I,GAA8I,EAXnK;AAYE,IAAA,sBAAsB,EAAE,CAACM,MAAD,EAAStB,KAAT,kBACtB,QAAC,SAAD,CAAW,IAAX;AAAA,8BACE;AAAA,kBAAOsB,MAAM,CAACR;AAAd;AAAA;AAAA;AAAA;AAAA,cADF,EAC6B,GAD7B,eAEE;AAAA,kBAAOQ,MAAM,CAACT;AAAd;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAqBS,MAAM,CAACT,KAA5B;AAAA;AAAA;AAAA;AAAA;AAbJ,KACOb,KAAK,CAAC2B,GADb;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GAxDQ5B,Y;;KAAAA,Y;AAwDR;;AAED,SAAS6B,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAM;AAAEL,IAAAA;AAAF,MAAWK,KAAK,CAACC,cAAvB;AACA,SAAO;AAAEN,IAAAA;AAAF,GAAP;AACD;;AAED,MAAMO,qBAAqB,GAAGnC,OAAO,CAACgC,QAAD,EAAW,EAAX,CAAP,CAAsB7B,YAAtB,CAA9B;AACA,SAASgC,qBAAqB,IAAIhC,YAAlC","sourcesContent":["import axios from 'axios';\nimport { useState } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead';\nimport { connect } from 'react-redux';\nimport { SERVER_URL } from '../../_constants';\n\nconst SEARCH_URI =SERVER_URL+ '/user/search';\n\nfunction UserTypeHead(props) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [options, setOptions] = useState([]);\n\n  const handleSearch = async (query) => {\n    setIsLoading(true);\n    await fetchData(query);\n    setIsLoading(false);\n  };\n\n  const fetchData = async (query) => {\n    try {\n      const results = await axios.get(`${SEARCH_URI}?queryString=${query}`);\n      const options = results.data.map((i) => ({\n        email: i.email,\n        name: `${i.first_name}${i.last_name ? \" \" + i.last_name : \"\"}`,\n        first_name: i.first_name,\n        last_name: i.last_name,\n        id: i.email,\n      }));\n      setOptions(options);\n    } catch (err) {\n      console.log(\"Error in fetch Data \" + err);\n    }\n  }\n\n  // Bypass client-side filtering by returning `true`. Results are already\n  // filtered by the search endpoint, so no need to do it again.\n  const filterBy = (option, skipCurrentUser) => {\n    if (skipCurrentUser) {\n      return option.email !== props.user.email;\n    }\n    return true;\n  };\n\n  return (\n    <AsyncTypeahead\n      key={props.key}\n      id=\"userTypeHead\"\n      filterBy={(option) => filterBy(option, props.skipCurrentUser)}\n      isLoading={isLoading}\n      labelKey=\"name\"\n      minLength={1}\n      onSearch={handleSearch}\n      options={options}\n      placeholder=\"Search User\"\n      onChange={props.onChange}\n      defaultInputValue={props.initialValue.first_name ? `${props.initialValue.first_name}${props.initialValue.last_name ? \" \" + props.initialValue.last_name : \"\"}` : ''}\n      renderMenuItemChildren={(option, props) => (\n        <ListGroup.Item key={option.email}>\n          <span>{option.name}</span>{' '}\n          <span>{option.email}</span>\n        </ListGroup.Item>\n      )}\n    />\n  );\n};\n\nfunction mapState(state) {\n  const { user } = state.authentication;\n  return { user };\n}\n\nconst connectedUserTypeHead = connect(mapState, {})(UserTypeHead);\nexport { connectedUserTypeHead as UserTypeHead };"]},"metadata":{},"sourceType":"module"}