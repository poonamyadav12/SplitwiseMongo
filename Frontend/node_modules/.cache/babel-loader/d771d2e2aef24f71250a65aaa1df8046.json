{"ast":null,"code":"import { convertAmount, SETTLEUP_TXN } from './money';\n\nvar _ = require('lodash');\n\nexport function calculateDebt(user, transactions, isFriendView = false) {\n  const oweAmount = _(transactions).filter(txn => txn.to.map(u => u.email).includes(user.email)).map(txn => ({\n    txn,\n    amount: convertAmount(txn.type === SETTLEUP_TXN ? txn.amount : txn.amount / (txn.to.length + 1), txn.currency_code, user.default_currency)\n  })).sumBy('amount');\n\n  const paidAmount = _(transactions).filter(txn => txn.from.email === user.email).map(txn => ({\n    txn,\n    amount: convertAmount(txn.type === SETTLEUP_TXN ? txn.amount : isFriendView ? txn.amount / (txn.to.length + 1) : txn.amount * txn.to.length / (txn.to.length + 1), txn.currency_code, user.default_currency)\n  })).sumBy('amount');\n\n  return JSON.parse(JSON.stringify({\n    oweAmount: oweAmount,\n    paidAmount: paidAmount,\n    totalAmount: paidAmount - oweAmount\n  }));\n}\nexport function calculateDebtForAGroup(group, transactions) {\n  return JSON.parse(JSON.stringify(_(group.members).filter(member => member.group_join_status !== \"INVITED\").map(member => ({\n    user: member,\n    ...calculateDebt(member, transactions)\n  }))));\n}\nexport function calculateDebtPerFriend(user, transactions) {\n  const payers = _.map(transactions, txn => txn.from);\n\n  const payees = _.flatMap(transactions, txn => txn.to);\n\n  const friends = _.unionBy(payers, payees, 'email').filter(u => u.email !== user.email);\n\n  const perFriendBalances = _(friends).map(friend => {\n    const perGroup = calculateBalancePerGroup(user, friend, transactions);\n    const total = perGroup.sumBy('total');\n    const lent = perGroup.sumBy('lent');\n    const owed = perGroup.sumBy('owed');\n    const totalBeforeSettlement = perGroup.sumBy('totalBeforeSettlement');\n    const lentBeforeSettlement = perGroup.sumBy('lentBeforeSettlement');\n    const owedBeforeSettlement = perGroup.sumBy('owedBeforeSettlement');\n    return {\n      friend,\n      per_group: perGroup,\n      total,\n      lent,\n      owed,\n      lentBeforeSettlement,\n      owedBeforeSettlement,\n      totalBeforeSettlement\n    };\n  });\n\n  const lent = perFriendBalances.filter(f => f.total > 0).sumBy('total');\n  const owed = perFriendBalances.filter(f => f.total < 0).sumBy('total');\n  const total = lent - Math.abs(owed);\n  const allBalancesV2 = {\n    total,\n    owed,\n    lent,\n    per_friend: perFriendBalances\n  };\n  return JSON.parse(JSON.stringify(allBalancesV2));\n}\n\nfunction calculateBalancePerGroup(user, friend, transactions) {\n  const perGroupAmounts = _(transactions).map(txn => ({\n    groupId: txn.group.id,\n    ...txn\n  })).groupBy('groupId').map((txns, groupId) => {\n    const {\n      owedBeforeSettlement,\n      settleUpByFriend\n    } = calculateOwedAmountPerFriendInGroup(user, friend, txns);\n    const {\n      lentBeforeSettlement,\n      settleUpByMe\n    } = calculateLentAmountPerFriendInGroup(user, friend, txns);\n    const lent = lentBeforeSettlement - settleUpByFriend;\n    const owed = owedBeforeSettlement - settleUpByMe;\n    return {\n      owed,\n      lent,\n      settleUpByFriend,\n      settleUpByMe,\n      lentBeforeSettlement,\n      owedBeforeSettlement,\n      totalBeforeSettlement: lentBeforeSettlement - owedBeforeSettlement,\n      total: lent - owed,\n      groupId,\n      group: txns[0].group\n    };\n  });\n\n  return perGroupAmounts;\n}\n\nfunction calculateOwedAmountPerFriendInGroup(user, friend, transactions) {\n  const oweTxns = _(transactions).filter(txn => txn.from.email === friend.email).filter(txn => txn.to.map(u => u.email).includes(user.email));\n\n  const oweAmounts = oweTxns.map(txn => ({\n    id: txn.id,\n    description: txn.description,\n    oweAmount: convertAmount(txn.type === SETTLEUP_TXN ? 0 : txn.amount / (txn.to.length + 1), txn.currency_code, user.default_currency),\n    settleUpAmount: convertAmount(txn.type === SETTLEUP_TXN ? txn.amount : 0, txn.currency_code, user.default_currency)\n  }));\n  return {\n    owedBeforeSettlement: oweAmounts.sumBy(txn => txn.oweAmount),\n    settleUpByFriend: oweAmounts.sumBy(txn => txn.settleUpAmount)\n  };\n}\n\nfunction calculateLentAmountPerFriendInGroup(user, friend, transactions) {\n  const lentTxns = _(transactions).filter(txn => txn.from.email === user.email).filter(txn => txn.to.map(u => u.email).includes(friend.email));\n\n  const lentAmounts = lentTxns.map(txn => ({\n    id: txn.id,\n    description: txn.description,\n    lentAmount: convertAmount(txn.type === SETTLEUP_TXN ? 0 : txn.amount / (txn.to.length + 1), txn.currency_code, user.default_currency),\n    settleUpAmount: convertAmount(txn.type === SETTLEUP_TXN ? txn.amount : 0, txn.currency_code, user.default_currency)\n  }));\n  return {\n    lentBeforeSettlement: lentAmounts.sumBy(txn => txn.lentAmount),\n    settleUpByMe: lentAmounts.sumBy(txn => txn.settleUpAmount)\n  };\n}","map":{"version":3,"sources":["/Users/poonam/Projects/SplitwiseMongoDb/Frontend/src/_helper/debtcalculator.js"],"names":["convertAmount","SETTLEUP_TXN","_","require","calculateDebt","user","transactions","isFriendView","oweAmount","filter","txn","to","map","u","email","includes","amount","type","length","currency_code","default_currency","sumBy","paidAmount","from","JSON","parse","stringify","totalAmount","calculateDebtForAGroup","group","members","member","group_join_status","calculateDebtPerFriend","payers","payees","flatMap","friends","unionBy","perFriendBalances","friend","perGroup","calculateBalancePerGroup","total","lent","owed","totalBeforeSettlement","lentBeforeSettlement","owedBeforeSettlement","per_group","f","Math","abs","allBalancesV2","per_friend","perGroupAmounts","groupId","id","groupBy","txns","settleUpByFriend","calculateOwedAmountPerFriendInGroup","settleUpByMe","calculateLentAmountPerFriendInGroup","oweTxns","oweAmounts","description","settleUpAmount","lentTxns","lentAmounts","lentAmount"],"mappings":"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","sourcesContent":["import { convertAmount, SETTLEUP_TXN } from './money';\n\nvar _ = require('lodash');\n\nexport function calculateDebt(user, transactions, isFriendView = false) {\n  const oweAmount = _(transactions)\n    .filter((txn) => txn.to.map((u) => u.email).includes(user.email))\n    .map((txn) => ({\n      txn,\n      amount: convertAmount(\n        txn.type === SETTLEUP_TXN\n          ? txn.amount\n          : txn.amount / (txn.to.length + 1),\n        txn.currency_code,\n        user.default_currency\n      ),\n    })).sumBy('amount');\n  const paidAmount = _(transactions)\n    .filter((txn) => txn.from.email === user.email)\n    .map((txn) => ({\n      txn,\n      amount: convertAmount(\n        txn.type === SETTLEUP_TXN\n          ? txn.amount\n          : isFriendView ? txn.amount / (txn.to.length + 1) : (txn.amount * txn.to.length) / (txn.to.length + 1),\n        txn.currency_code,\n        user.default_currency\n      ),\n    })).sumBy('amount');\n\n  return JSON.parse(\n    JSON.stringify({\n      oweAmount: oweAmount,\n      paidAmount: paidAmount,\n      totalAmount: paidAmount - oweAmount,\n    })\n  );\n}\n\nexport function calculateDebtForAGroup(group, transactions) {\n  return JSON.parse(\n    JSON.stringify(\n      _(group.members).filter((member) => member.group_join_status !== \"INVITED\").map((member) => ({\n        user: member,\n        ...calculateDebt(member, transactions),\n      }))\n    )\n  );\n}\n\nexport function calculateDebtPerFriend(user, transactions) {\n  const payers = _.map(transactions, (txn) => txn.from);\n  const payees = _.flatMap(transactions, (txn) => txn.to);\n  const friends = _.unionBy(payers, payees, 'email').filter(\n    (u) => u.email !== user.email\n  );\n\n  const perFriendBalances = _(friends).map((friend) => {\n    const perGroup = calculateBalancePerGroup(user, friend, transactions);\n    const total = perGroup.sumBy('total');\n    const lent = perGroup.sumBy('lent');\n    const owed = perGroup.sumBy('owed');\n    const totalBeforeSettlement = perGroup.sumBy('totalBeforeSettlement');\n    const lentBeforeSettlement = perGroup.sumBy('lentBeforeSettlement');\n    const owedBeforeSettlement = perGroup.sumBy('owedBeforeSettlement');\n    return {\n      friend,\n      per_group: perGroup,\n      total,\n      lent,\n      owed,\n      lentBeforeSettlement,\n      owedBeforeSettlement,\n      totalBeforeSettlement,\n    };\n  });\n  const lent = perFriendBalances.filter((f) => f.total > 0).sumBy('total');\n  const owed = perFriendBalances.filter((f) => f.total < 0).sumBy('total');\n  const total = lent - Math.abs(owed);\n  const allBalancesV2 = {\n    total,\n    owed,\n    lent,\n    per_friend: perFriendBalances,\n  };\n\n  return JSON.parse(\n    JSON.stringify(allBalancesV2)\n  );\n}\n\nfunction calculateBalancePerGroup(user, friend, transactions) {\n  const perGroupAmounts = _(transactions)\n    .map((txn) => ({ groupId: txn.group.id, ...txn }))\n    .groupBy('groupId')\n    .map((txns, groupId) => {\n      const { owedBeforeSettlement, settleUpByFriend } = calculateOwedAmountPerFriendInGroup(user, friend, txns);\n      const { lentBeforeSettlement, settleUpByMe } = calculateLentAmountPerFriendInGroup(user, friend, txns);\n      const lent = lentBeforeSettlement - settleUpByFriend;\n      const owed = owedBeforeSettlement - settleUpByMe;\n      return {\n        owed,\n        lent,\n        settleUpByFriend,\n        settleUpByMe,\n        lentBeforeSettlement,\n        owedBeforeSettlement,\n        totalBeforeSettlement: lentBeforeSettlement - owedBeforeSettlement,\n        total: lent - owed,\n        groupId,\n        group: txns[0].group,\n      };\n    });\n  return perGroupAmounts;\n}\n\nfunction calculateOwedAmountPerFriendInGroup(user, friend, transactions) {\n  const oweTxns = _(transactions)\n    .filter((txn) => txn.from.email === friend.email)\n    .filter((txn) => txn.to.map((u) => u.email).includes(user.email));\n  const oweAmounts = oweTxns.map((txn) => ({\n    id: txn.id,\n    description: txn.description,\n    oweAmount: convertAmount(\n      txn.type === SETTLEUP_TXN ? 0 : txn.amount / (txn.to.length + 1),\n      txn.currency_code,\n      user.default_currency\n    ),\n    settleUpAmount: convertAmount(\n      txn.type === SETTLEUP_TXN ? txn.amount : 0,\n      txn.currency_code,\n      user.default_currency\n    ),\n  }));\n\n  return { owedBeforeSettlement: oweAmounts.sumBy((txn) => txn.oweAmount), settleUpByFriend: oweAmounts.sumBy((txn) => txn.settleUpAmount) };\n}\n\nfunction calculateLentAmountPerFriendInGroup(user, friend, transactions) {\n  const lentTxns = _(transactions)\n    .filter((txn) => txn.from.email === user.email)\n    .filter((txn) => txn.to.map((u) => u.email).includes(friend.email));\n  const lentAmounts = lentTxns.map((txn) => ({\n    id: txn.id,\n    description: txn.description,\n    lentAmount: convertAmount(\n      txn.type === SETTLEUP_TXN ? 0 : txn.amount / (txn.to.length + 1),\n      txn.currency_code,\n      user.default_currency\n    ),\n    settleUpAmount: convertAmount(\n      txn.type === SETTLEUP_TXN ? txn.amount : 0,\n      txn.currency_code,\n      user.default_currency\n    ),\n  }));\n\n  return { lentBeforeSettlement: lentAmounts.sumBy((txn) => txn.lentAmount), settleUpByMe: lentAmounts.sumBy((txn) => txn.settleUpAmount) };\n}\n"]},"metadata":{},"sourceType":"module"}